var Q = require('q');
var model = require('../models');
var bcrypt = require('bcrypt');
var salt = bcrypt.genSaltSync(10);

/**
 * 根据id获取用户信息
 */
module.exports.getUserById = function(id) {
  return model.user.fingOne({
	where: {id: +id}
  });
};

/**
 * 注册添加用户
 */
module.exports.register = function(userObj) {
  var defered = Q.defer();
  var username = userObj.username;
  var password = userObj.password;

  if (!username || !password) {
  	defered.reject(new Error('UserControllerRegisterError: username or password should not be null!'));
	return defered.promise;
  }

  model.user.findOrCreate({
	where: {name: username},
	defaults: {password: bcrypt.hashSync(password, salt)}
  })
  .spread(function(user, created) {
  	if (!created) {
	  throw new Error('UserControllerRegisterError: username is exsist!');
	}
	defered.resolve(user);
  })
  .catch(function(err) {
  	defered.reject(err);
  });

  return defered.promise;
};

/**
 * 登录校验
 */
module.exports.auth = function(authObj) {
  var defered = Q.defer();
  var username = authObj.username;
  var password = authObj.password;

  if (!username || !password) {
  	defered.reject(new Error('UserControllerAuthError: username or password should not be null!'));
	return defered.promise;
  }

  model.user.findOne({
  	where: {name: username}
  })
  .then(function(user) {
  	if (!user) {
		defered.resolve({
		  isAuth: false,
		  message: 'username is not exsist!'
		});
	}
	if (bcrypt.compareSync(password, user.password)) {
		defered.resolve({
		  isAuth: true, 
		  user: user,
		  message: 'success'
		});
	} else {
		defered.resolve({
		  isAuth: false,
		  message: 'password is not correct!'
		});
	}
  })
  .catch(function(err) {
  	defered.reject(err);
  });

  return defered.promise;
};
